if (!require('maps')) install.packages('maps'); library('maps')
if (!require('sf')) install.packages('sf'); library('sf')
if (!require('rnaturalearth')) install.packages('rnaturalearth'); library('rnaturalearth')
if (!require('here')) install.packages('here'): library('here')
if (!require('rnaturalearthdata')) install.packages('rnaturalearthdata'); library('rnaturalearthdata')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggspatial')) install.packages('ggspatial'); library('ggspatial')
if (!require('rgeos')) install.packages('rgeos'); library('rgeos')
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('here')) install.packages('here'); library('here')
# load data
world <- ne_countries(scale = "medium", returnclass = "sf")
# gene world map
worldmaps <- ggplot(data = world) +
geom_sf(fill="grey90")+ theme(panel.grid.major = element_line(color = "gray60", linetype = "dashed", size = 0.25),panel.background = element_rect(fill = "aliceblue")) +
ggtitle("Sampled areas", subtitle = "BIEN database search") + annotate("rect",size=1.3,xmin=-9,xmax=36.1,ymin=33,ymax=44, colour="darkorange", alpha=0) + annotate("rect",size=1.3,xmin=90,xmax=135.1,ymin=33,ymax=44, colour="cyan3", alpha=0) + annotate("rect",size=1.3,xmin=-121,xmax=-75.9,ymin=33,ymax=44, colour="deeppink", alpha=0)
mediterranean <- ggplot(data = world) +
geom_sf(color = NA) +
labs( x = "", y = "") +
coord_sf(xlim = c(-10, 37), ylim = c(30, 46), expand = FALSE) +
theme_bw() + theme(panel.background = element_rect(fill = "aliceblue"), axis.ticks = element_blank(), axis.text = element_blank(), rect = element_blank(), panel.grid = element_blank(), plot.title = element_text(size = 15,family = "sans", face = "bold", vjust = 4), plot.subtitle = element_text(size = 10, family = "sans", face = "plain", vjust = 4)) + labs(title = "Day 1: Part-to-whole", subtitle = "#30DayChartChallenge | @agalanis97", caption = "Data: https://ec.europa.eu/jrc")
data <- data.frame(
category=c("A", "B"),
count=c(90, 10)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
pie <- ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category, alpha = 0.6)) +
geom_rect() + scale_fill_manual(values = c("A" = "#536298", "B" = "#eff1f8"))+
coord_polar(theta="y")+
xlim(c(1, 4)) +
theme_void() +
theme(legend.position = "none")
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.6, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 25, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 25, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.35)
ggsave(plot = plot, filename = "day1.pdf")
ggsave(plot = plot, filename = "day2.pdf", width = 10, height = 10)
plot
save_plot(plot = plot, filename = "day3.pdf", width = 10, height = 10)
save_plot(plot = plot, filename = "day3.pdf")
save_plot(plot = plot, filename = "day1.pdf", base_width = 10)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10, base_height = 10)
save_plot(plot = plot, filename = "day2.pdf", base_width = 10, base_height = 10)
save_plot(plot = plot, filename = "day2.pdf", base_width = 10, base_height = 10)
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.4, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 25, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 25, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.35)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10, base_height = 10)
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.45, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 30, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 40, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.35)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10, base_height = 10)
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.45, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 30, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 40, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.4)
save_plot(plot = plot, filename = "day1.pdf", base_width = 10, base_height = 10)
# Now let's make a mock donut chart
data <- data.frame(
category=c("A", "B"),
count=c(90, 10)
)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$count)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
pie <- ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category, alpha = 0.6)) +
geom_rect() + scale_fill_manual(values = c("A" = "#536298", "B" = "#eff1f8"))+
coord_polar(theta="y")+
xlim(c(1, 4)) +
theme_void() +
theme(legend.position = "none")
pie
pie
# Make the plot
pie <- ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category, alpha = 0.6)) +
geom_rect() + scale_fill_manual(values = c("A" = "#536298", "B" = "#eff1f8"))+
coord_polar(theta="y")+
xlim(c(1, 4)) +
theme_void() +
theme(legend.position = "none")
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.45, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 30, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 40, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.4)
plot
# Make the donut plot
pie <- ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category, alpha = 0.6)) +
geom_rect() + scale_fill_manual(values = c("A" = "#536298", "B" = "#eff1f8"))+
coord_polar(theta="y")+
xlim(c(1, 4)) +
theme_void() +
theme(legend.position = "none")
pie
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.45, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 30, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 40, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.4)
if (!require('maps')) install.packages('maps'); library('maps')
if (!require('rnaturalearth')) install.packages('rnaturalearth'); library('rnaturalearth')
if (!require('here')) install.packages('here'): library('here')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggspatial')) install.packages('ggspatial'); library('ggspatial')
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('here')) install.packages('here'); library('here')
# Load world data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Extract the Mediterranean
mediterranean <- ggplot(data = world) +
geom_sf(color = NA) +
labs( x = "", y = "") +
coord_sf(xlim = c(-10, 37), ylim = c(30, 46), expand = FALSE) +
theme_bw() + theme(panel.background = element_rect(fill = "aliceblue"), axis.ticks = element_blank(), axis.text = element_blank(), rect = element_blank(), panel.grid = element_blank(), plot.title = element_text(size = 15,family = "sans", face = "bold", vjust = 4), plot.subtitle = element_text(size = 10, family = "sans", face = "plain", vjust = 4)) + labs(title = "Day 1: Part-to-whole", subtitle = "#30DayChartChallenge | @agalanis97", caption = "Data: https://ec.europa.eu/jrc")
# Now let's make a mock donut chart. Code edited from R graph gallery
data <- data.frame(
category=c("A", "B"),
count=c(90, 10)
)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$count)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Make the donut plot
pie <- ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category, alpha = 0.6)) +
geom_rect() + scale_fill_manual(values = c("A" = "#536298", "B" = "#eff1f8"))+
coord_polar(theta="y")+
xlim(c(1, 4)) +
theme_void() +
theme(legend.position = "none")
plot <- ggdraw(mediterranean) + draw_plot(pie, scale = 0.45, x=-0.25, y=-0.007) + draw_label("of fish in the Mediterranean", color = "black", size = 30, x = 0.7, y=0.6) + draw_label("90%", color = "black", size = 57, x = 0.25, y=0.5) + draw_label("are overfished.", color = "black", size = 40, x = 0.7, y=0.5, fontface = "bold") + draw_label("It has also lost 41% of marine mammals.", color = "black", size = 15, x = 0.7, y=0.4)
plot
if (!require('here')) install.packages('here'): library('here')
if (!require('hrbrthemes')) install.packages('hrbrthemes'): library('hrbrthemes')
devtools::install_github("hrbrmstr/waffle")
library(hrbrthemes)
library(waffle)
greek_parliament <- data.frame(gender=c("Male","Female"), number = c(235,65))
waffle(
parts / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
waffle(rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
waffle(rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
if (!require('fontawesome')) install.packages('fontawesome'): library('fontawesome')
install.packages("fontawesome")
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
library('fontawesome')
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
remove.packages("fontawesome")
if (!require('fontawesome')) install.packages('fontawesome'): library('fontawesome')
install.packages("fontawesome")
if (!require('here')) install.packages('here'): library('here')
if (!require('hrbrthemes')) install.packages('hrbrthemes'): library('hrbrthemes')
library(waffle)
greek_parliament <- data.frame(gender=c("Male","Female"), number = c(235,65))
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
library(fontawesome)
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "female", size = 8
) + expand_limits(y = c(0, 4))
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "fa-female", size = 8
) + expand_limits(y = c(0, 4))
waffle(
300 / 10, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "fa-female", size = 8
) + expand_limits(y = c(0, 4))
waffle(
300, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "fa-female", size = 8
) + expand_limits(y = c(0, 4))
waffle(
300, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "fa-female", size = 8
)
waffle(
300, rows = 3, colors = c("#969696", "#1879bf"),
use_glyph = "medkit", size = 8
)
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
if (!require('emojifont')) install.packages('emojifont'): library('emojifont')
load.fontawesome(font = "fontawesome-webfont.otf")
library(emojifont)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
remove.packages(fontawesome())
remove.packages("fontawesome")
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
library(emojifont)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
if (!require('fontawesome')) install.packages('fontawesome'): library('fontawesome')
library(fontawesome)
if (!require('here')) install.packages('here'): library('here')
if (!require('hrbrthemes')) install.packages('hrbrthemes'): library('hrbrthemes')
if (!require('fontawesome')) install.packages('fontawesome'): library('fontawesome')
fa(name = "r-project", fill = "steelblue")
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
library(waffle)
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "child", glyph_size = 6)
if (!require('extrafont')) install.packages('extrafont'): library('extrafont')
library(extrafont)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "child", glyph_size = 6)
fonts()
font_import()
?font_import
getwd()
font_import("C:/Users/user/Documents/GitHub/30-day-chart-challenge")
font_import("C:/Users/user/Documents/GitHub/30-day-chart-challenge")
fonts()
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
font_import("C:/Users/user/Documents/GitHub/30-day-chart-challenge")
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
loadfonts(device = "win")
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "child", glyph_size = 6)
font_import("C:/Users/user/Documents/GitHub/30-day-chart-challenge")
font_import("C:/Users/user/Documents/GitHub/30-day-chart-challenge")
loadfonts(device = "win")
waffle(
c(`Poor=10` =10, `Average=18` = 18, `Excellent=7` =7), rows = 5, colors = c("#FD6F6F", "#93FB98", "#D5D9DD"),
use_glyph = "female", glyph_size = 12 ,title = 'Girls Performance', legend_pos="bottom"
)
waffle(c(50, 30, 15, 5), rows = 5, use_glyph = "music", glyph_size = 4)
